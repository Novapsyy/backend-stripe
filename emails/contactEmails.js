const { sendEmailWithRetry } = require("./emailCore");
const {
  generateContactEmailHTML,
  generateConfirmationEmailHTML,
} = require("./emailTemplates");
const { validateContactData } = require("./emailValidation");
const { CONTACT_EMAIL } = require("../config/email");
const { logWithTimestamp } = require("../shared/logger");

/**
 * Traite et envoie un email de contact
 * @param {object} contactData - Donn√©es du formulaire de contact
 * @returns {Promise<object>} R√©sultat de l'envoi
 */
async function sendContactEmail(contactData) {
  logWithTimestamp("info", "üî• Traitement nouveau message de contact");

  const { name, email, phone, message } = contactData;

  logWithTimestamp("info", "üìã Donn√©es re√ßues", {
    name: name || "MANQUANT",
    email: email || "MANQUANT",
    phone: phone || "Non fourni",
    messageLength: message ? message.length : 0,
  });

  // Validation des donn√©es
  const validation = validateContactData({ name, email, phone, message });

  if (!validation.isValid) {
    logWithTimestamp("warn", "‚ùå Validation √©chou√©e", validation.errors);
    return {
      success: false,
      error: "Donn√©es invalides",
      errors: validation.errors,
    };
  }

  try {
    // Pr√©parer les donn√©es propres
    const cleanData = {
      name: name.trim(),
      email: email.trim().toLowerCase(),
      phone: phone ? phone.trim() : null,
      message: message.trim(),
    };

    // G√©n√©rer l'email HTML
    const emailSubject = `[Site Web] Nouveau message de ${cleanData.name}`;
    const emailHTML = generateContactEmailHTML(cleanData);

    logWithTimestamp(
      "info",
      "üöÄ ENVOI EMAIL PRINCIPAL vers contact@novapsy.info"
    );

    // Envoyer l'email principal avec reply-to
    const emailResult = await sendEmailWithRetry(
      CONTACT_EMAIL,
      emailSubject,
      emailHTML,
      {
        reply_to: cleanData.email, // Permet de r√©pondre directement
        headers: {
          "X-Priority": "1", // Haute priorit√©
          "X-Contact-Form": "novapsy-website",
        },
      }
    );

    if (emailResult.success) {
      logWithTimestamp("info", "üéâ SUCCESS - Email principal envoy√©", {
        messageId: emailResult.messageId,
        attempt: emailResult.attempt,
      });

      // Envoyer email de confirmation en arri√®re-plan (optionnel)
      setImmediate(async () => {
        try {
          const confirmationSubject = "Confirmation - Message re√ßu par Novapsy";
          const confirmationHTML = generateConfirmationEmailHTML(
            cleanData.name,
            cleanData.message
          );

          const confirmResult = await sendEmailWithRetry(
            cleanData.email,
            confirmationSubject,
            confirmationHTML
          );

          if (confirmResult.success) {
            logWithTimestamp("info", "‚úÖ Confirmation utilisateur envoy√©e", {
              to: cleanData.email,
              messageId: confirmResult.messageId,
            });
          } else {
            logWithTimestamp(
              "warn",
              "‚ö†Ô∏è √âchec confirmation utilisateur (non critique)",
              {
                to: cleanData.email,
                error: confirmResult.error,
              }
            );
          }
        } catch (error) {
          logWithTimestamp(
            "warn",
            "‚ö†Ô∏è Exception confirmation utilisateur (ignor√©e)",
            {
              error: error.message,
            }
          );
        }
      });

      // R√©ponse de succ√®s
      return {
        success: true,
        message: "Votre message a √©t√© envoy√© avec succ√®s !",
        details: "Nous vous r√©pondrons dans les plus brefs d√©lais.",
        messageId: emailResult.messageId,
      };
    } else {
      // √âchec de l'email principal
      logWithTimestamp(
        "error",
        "üí• √âCHEC CRITIQUE - Email principal non envoy√©",
        {
          error: emailResult.error,
          totalAttempts: emailResult.totalAttempts,
        }
      );

      return {
        success: false,
        error: "Impossible d'envoyer votre message",
        details:
          "Veuillez r√©essayer ou nous contacter directement √† contact@novapsy.info",
        technical: {
          attempts: emailResult.totalAttempts,
          lastError: emailResult.error,
        },
      };
    }
  } catch (error) {
    logWithTimestamp("error", "üí• EXCEPTION CRITIQUE dans formulaire contact", {
      error: error.message,
      stack: error.stack,
    });

    return {
      success: false,
      error: "Erreur serveur critique",
      message:
        "Veuillez r√©essayer ou nous contacter directement √† contact@novapsy.info",
    };
  }
}

module.exports = {
  sendContactEmail,
};
