const { sendEmailWithRetry } = require("./emailCore");
const { generatePreventionRequestEmailHTML } = require("./emailTemplates");
const { validatePreventionRequest } = require("./emailValidation");
const { CONTACT_EMAIL } = require("../config/email");
const { logWithTimestamp } = require("../shared/logger");

/**
 * Traite et envoie une demande de pr√©vention personnalis√©e
 * @param {object} requestData - Donn√©es de la demande
 * @param {string} to - Email de destination (optionnel, d√©faut: CONTACT_EMAIL)
 * @param {string} subject - Sujet de l'email (optionnel)
 * @returns {Promise<object>} R√©sultat de l'envoi
 */
async function sendPreventionRequest(requestData, to = null, subject = null) {
  logWithTimestamp("info", "üéØ Traitement nouvelle demande de pr√©vention");

  const {
    dates,
    durees,
    lieu,
    publicConcerne,
    thematiquesEnvisagees,
    formeEnvisagee,
    message,
    category,
    timestamp,
    source,
    userEmail,
  } = requestData || {};

  logWithTimestamp("info", "üìã Donn√©es de demande re√ßues", {
    category: category?.nom || "Non sp√©cifi√©e",
    dates: dates || "Non sp√©cifi√©es",
    lieu: lieu || "Non sp√©cifi√©",
    publicConcerne: publicConcerne || "Non sp√©cifi√©",
    hasThematiques: !!thematiquesEnvisagees,
    hasForme: !!formeEnvisagee,
    hasMessage: !!message,
    source: source || "unknown",
    userEmail: userEmail || "Non fourni",
  });

  // Validation des donn√©es
  const validation = validatePreventionRequest(requestData || {});

  if (!validation.isValid) {
    logWithTimestamp(
      "warn",
      "‚ùå Validation demande pr√©vention √©chou√©e",
      validation.errors
    );
    return {
      success: false,
      error: "Donn√©es de demande invalides",
      errors: validation.errors,
    };
  }

  try {
    // Pr√©parer les donn√©es propres
    const cleanData = {
      dates: dates.trim(),
      durees: durees.trim(),
      lieu: lieu.trim(),
      publicConcerne: publicConcerne.trim(),
      thematiquesEnvisagees: thematiquesEnvisagees
        ? thematiquesEnvisagees.trim()
        : null,
      formeEnvisagee: formeEnvisagee ? formeEnvisagee.trim() : null,
      message: message ? message.trim() : null,
      category,
      timestamp: timestamp || new Date().toISOString(),
      source: source || "prevention_catalog",
      userEmail: userEmail || null,
    };

    // G√©n√©rer le sujet de l'email
    const emailSubject =
      subject || `[Pr√©vention] Nouvelle demande - ${category.nom}`;

    // G√©n√©rer l'email HTML
    const emailHTML = generatePreventionRequestEmailHTML(cleanData);

    logWithTimestamp(
      "info",
      "üöÄ ENVOI EMAIL DEMANDE PR√âVENTION vers contact@novapsy.info"
    );

    // Envoyer l'email avec retry
    const emailResult = await sendEmailWithRetry(
      to || CONTACT_EMAIL,
      emailSubject,
      emailHTML,
      {
        headers: {
          "X-Priority": "1", // Haute priorit√©
          "X-Contact-Form": "novapsy-prevention-catalog",
          "X-Prevention-Category": category.nom,
        },
      }
    );

    if (emailResult.success) {
      logWithTimestamp("info", "üéâ SUCCESS - Email demande pr√©vention envoy√©", {
        category: category.nom,
        messageId: emailResult.messageId,
        attempt: emailResult.attempt,
      });

      // R√©ponse de succ√®s
      return {
        success: true,
        message: "Votre demande de pr√©vention a √©t√© envoy√©e avec succ√®s !",
        details:
          "Notre √©quipe vous contactera rapidement pour finaliser votre formation personnalis√©e.",
        messageId: emailResult.messageId,
        category: category.nom,
      };
    } else {
      // √âchec de l'email
      logWithTimestamp(
        "error",
        "üí• √âCHEC CRITIQUE - Email demande pr√©vention non envoy√©",
        {
          category: category.nom,
          error: emailResult.error,
          totalAttempts: emailResult.totalAttempts,
        }
      );

      return {
        success: false,
        error: "Impossible d'envoyer votre demande de pr√©vention",
        details:
          "Veuillez r√©essayer ou nous contacter directement √† contact@novapsy.info",
        technical: {
          attempts: emailResult.totalAttempts,
          lastError: emailResult.error,
        },
      };
    }
  } catch (error) {
    logWithTimestamp("error", "üí• EXCEPTION CRITIQUE dans demande pr√©vention", {
      category: category?.nom || "unknown",
      error: error.message,
      stack: error.stack,
    });

    return {
      success: false,
      error: "Erreur serveur critique",
      message:
        "Veuillez r√©essayer ou nous contacter directement √† contact@novapsy.info",
    };
  }
}

/**
 * Teste la fonctionnalit√© de demande de pr√©vention avec diff√©rents th√®mes
 * @param {string} theme - Th√®me √† tester (psycho, sexualite, handicap)
 * @returns {Promise<object>} R√©sultat du test
 */
async function testPreventionRequest(theme = "default") {
  logWithTimestamp("info", "üß™ Test demande de pr√©vention", { theme });

  let testCategory;
  switch (theme) {
    case "psycho":
      testCategory = {
        id: 1,
        nom: "Pr√©vention du Burnout Psychologique",
        description:
          "Formation compl√®te sur la pr√©vention et la gestion du burnout et stress professionnel",
      };
      break;
    case "sexualite":
      testCategory = {
        id: 2,
        nom: "Sexualit√© et Bien-√™tre",
        description:
          "Formation sur l'accompagnement en sant√© sexuelle et intimit√©",
      };
      break;
    case "handicap":
      testCategory = {
        id: 3,
        nom: "Handicaps Invisibles en Milieu Professionnel",
        description:
          "Sensibilisation et inclusion des handicaps invisibles au travail",
      };
      break;
    default:
      testCategory = {
        id: 1,
        nom: "Pr√©vention G√©n√©rale",
        description: "Formation g√©n√©rale de pr√©vention (couleur par d√©faut)",
      };
  }

  const testRequestData = {
    dates: "Semaine du 15 mars 2025",
    durees: "2 jours, 14 heures",
    lieu: "Paris ou en ligne",
    publicConcerne: "Professionnels de sant√© mentale",
    thematiquesEnvisagees:
      "Techniques adapt√©es au th√®me\nApproche personnalis√©e",
    formeEnvisagee: "Ateliers pratiques avec mises en situation",
    message: `Nous souhaiterions une formation adapt√©e sur le th√®me : ${testCategory.nom}`,
    category: testCategory,
    timestamp: new Date().toISOString(),
    source: "prevention_catalog_test",
  };

  const subject = `üß™ Test Demande Pr√©vention ${testCategory.nom} - Novapsy`;

  try {
    const result = await sendPreventionRequest(
      testRequestData,
      CONTACT_EMAIL,
      subject
    );

    if (result.success) {
      logWithTimestamp("info", "‚úÖ Test demande pr√©vention envoy√© avec succ√®s");
      return {
        success: true,
        message: "Test de demande de pr√©vention fonctionnel",
        details: {
          messageId: result.messageId,
          theme: theme,
          category: testRequestData.category.nom,
        },
      };
    } else {
      logWithTimestamp(
        "error",
        "‚ùå Test demande pr√©vention √©chou√©",
        result.error
      );
      return {
        success: false,
        error: "Test de demande de pr√©vention d√©faillant",
        details: result.error,
      };
    }
  } catch (error) {
    logWithTimestamp("error", "üí• Exception test demande pr√©vention", error);
    return {
      success: false,
      error: "Erreur lors du test",
      message: error.message,
    };
  }
}

module.exports = {
  sendPreventionRequest,
  testPreventionRequest,
};
